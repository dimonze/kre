<?php

/**
 * Page
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    kre
 * @subpackage model
 * @author     Garin Studio
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Page extends BasePage
{
  const
  NEWS_ID           = 6,
  NEWS_PARENT_ID    = 2,
  REVIEW_ID         = 22,
  REVIEW_PARENT_ID  = 19,
  SERVICE_ID        = 11,
  ABOUT_ID          = 2,
  ADVICES_ID        = 16;

  protected
    $_routes = array(
      2   => 'about',
      6   => 'news',
      11  => 'services',
      16  => 'advices',
      19  => 'analytics',
      22  => 'review',
      26  => 'contacts',
      27  => 'vacancies',
    );


  public function isNews()
  {
    return $this->id == self::NEWS_ID;
  }

  public function isReview()
  {
    return $this->id == self::REVIEW_ID;
  }

  public function isVacancyType()
  {
    return in_array($this->id, array(56,57,58,59,8560));
  }

  public function isEqualTo($page)
  {
    return !empty($page) && $this->id == $page->id;
  }

  public function isDescendantOf($page)
  {
    return !empty($page) && $this->lft > $page->lft && $this->rgt < $page->rgt;
  }

  public function getRoute()
  {
    if (isset($this->_routes[$this->id])) {
      return $this->_routes[$this->id];
    }
    return null;
  }

  public function getVacancyType()
  {
    return Vacancy::getTypeById($this->id);
  }

  public function getIndent()
  {
    return str_repeat('· ', $this->level);
  }

  public function getIndentedName()
  {
    return $this->indent.$this->name;
  }

  public function isDescendantOfOrEqualTo($page)
  {
    return $this->isEqualTo($page) || $this->isDescendantOf($page);
  }

  public function getAnonsText()
  {
    if ($anons = $this->_get('anons')) return $anons;

    $symb2 = 500;
    $symb1 = $symb2 - 150;

    $text = strip_tags($this->_get('body'));
    if (empty($text)) return null;
    if (mb_strlen($text) <= $symb2) return $text;

    preg_match('/^.{'.$symb1.'}[^.!;?]*(?:[.!;?]|$)/ism', $text, $matches);
    if (empty($matches[0]) || mb_strlen($matches[0]) > $symb2) {
      return mb_substr($text, 0, $symb2).'...';
    }

    return $matches[0];
  }

  public function preDelete($event)
  {
    parent::preDelete($event);

    $node = $this->getNode();
    if ($node->hasChildren()) {
      foreach ($node->getChildren() as $child) {
        $child->delete();
      }
    }
  }
}