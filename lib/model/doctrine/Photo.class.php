<?php

/**
 * Photo
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    kre
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Photo extends BasePhoto
{
  public static $_types = array(
    1 => 'Фасад',
    2 => 'Интерьер',
    3 => 'Планировки',
    4 => 'Участок',
    5 => 'Шахматки',
  );

  protected
    $_file,
    $_storage,
    $_thumb_options = array(
      'thumb'   => array('width' => 140, 'height' => 100, 'quality' => 70, 'inflate' => false, 'crop' => false),
      'full'    => array('width' => 600, 'height' => 600, 'quality' => 86, 'inflate' => false, 'crop' => false, 'watermark' => true),
      'full_'    => array('width' => 600, 'height' => 600, 'quality' => 86, 'inflate' => false, 'crop' => false),
      'pres'    => array('width' => 300, 'height' => 225, 'quality' => 86, 'inflate' => false, 'crop' => false, 'watermark' => true),
      'pres_'    => array('width' => 300, 'height' => 225, 'quality' => 86, 'inflate' => false, 'crop' => false),
  );


  public function getPhotoTypeText()
  {
    return $this->photo_type_id ? self::$_types[$this->_get('photo_type_id')] : '';
  }

  public function getIsRestricted()
  {
    return 5 == $this->photo_type_id;
  }

  public function getFile()
  {
    return $this->_file;
  }

  public function setFile($value, $cheat = false)
  {
    if (!$value) return;

    if ($value instanceOf sfValidatedFile) {
      $tmpfile = sprintf('%s/%s', sfConfig::get('sf_tmp_dir'), $value->generateFilename());
      $this->_file = $value->save($tmpfile);
    }
    else {
      if(!$cheat) {
        throw new Exception('Only instance of sfValidatedFile can be set as file');
      }
      $parts = explode('.', $value);
      $tmpfile = sprintf('%s/%s.%s', sfConfig::get('sf_tmp_dir'), sha1(array_shift($parts).microtime()), array_pop($parts));
      copy($value, $tmpfile);
      $this->_file = $tmpfile;
    }
  }

  public function setFileDelete($value)
  {
    if ($value) $this->deletePhoto();
  }

  public function getImage($thumb)
  {
    if ($this->is_pdf) {
      return '/images/pdficon.png';
    }

    if ($this->is_xls) {
      return '/images/xlsicon.png';
    }

    if (!isset($this->_thumb_options[$thumb])) {
      throw new Exception(sprintf('Options for thumb "%s" is not specified', $thumb));
    }

    $path = $this->getStorage()->getThumb($this->id, $thumb, $this->_thumb_options[$thumb]);
    return str_replace(sfConfig::get('sf_web_dir'), '', $path);
  }

  public function getImageSource($full_path = false)
  {
    $path = $this->getStorage()->getFilename($this->id);
    return $full_path ? $path : str_replace(sfConfig::get('sf_web_dir'), '', $path);
  }

  public function getIsPdf()
  {
    return strpos($this->image_source, '.pdf');
  }

  public function getIsXls()
  {
    return strpos($this->image_source, '.xls');
  }

  public function getImageName()
  {
    return $this->name;
  }

  public function getImageAlt()
  {
    $lot = $this->Lot;
    $alt = array();

    if($lot->is_city_type) {
      if(!empty($lot->Params['estate'])) {
        $alt[] = $lot->Params['estate'];
      }
      if($address = $lot->getPrettyAddress('street', true)) {
        $alt[] = $address;
      }
    }
    if($lot->is_country_type) {
      if(!empty($lot->Params['locality'])) {
        $alt[] = $lot->Params['locality'];
      }
      if(!empty($lot->Params['cottageVillage'])) {
        $alt[] = $lot->Params['cottageVillage'];
      }
    }
    if($lot->is_commercial_type) {
      if(!empty($lot->Params['objecttype'])) {
        $alt[] = $lot->Params['objecttype'];
      }
      if($address = $lot->getPrettyAddress('street', true)) {
        $alt[] = $address;
      }
    }

    return implode(' ', $alt);
  }

  public function getWebFileName()
  {
    return str_replace(sfConfig::get('sf_web_dir'), '', $this->getStorage()->getFileName($this->id));
  }

  public function postSave($event)
  {
    if ($this->_file) {
      $this->cleanupThumbs();
      $this->getStorage()->store($this->_file, $this->id, true);
      $this->_file = null;
    }

    parent::postSave($event);
  }

  public function preDelete($event)
  {
    $this->deletePhoto();

    parent::preDelete($event);
  }


  private function deletePhoto()
  {
    $this->cleanupThumbs();
    $this->getStorage()->delete($this->id);
  }

  private function cleanupThumbs()
  {
    foreach (array_keys($this->_thumb_options) as $name) {
      $this->getStorage()->delete($this->id, $name);
    }
  }

  private function getStorage()
  {
    if (!$this->_storage) {
      $storage_options = array(
        'root'        => sfConfig::get('sf_upload_dir').'/photo',
        'target_mime' => 'image/jpeg',
      );

      $this->_storage = new FileStorage($storage_options);
    }

    return $this->_storage;
  }
}
