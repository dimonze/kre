<?php

/**
 * LotTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LotTable extends Doctrine_Table
{
  /**
    * Returns an instance of this class.
    *
    * @return object LotTable
    */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Lot');
  }

  public static function getNewId($type, $old_id)
  {
    $map_file = sprintf('%s/rewrite/%s', sfConfig::get('sf_data_dir'), $type);

    if ($old_id && file_exists($map_file)) {
      $fh = fopen($map_file, 'r');
      while ($row = fgets($fh)) {
        if (0 === strpos($row, $old_id . "\t")) {
          list(, $new_id) = explode("\t", trim($row));
          return $new_id;
        }
      }
    }
  }

  public function createQuery($alias = '')
  {
    if (!empty($alias)) {
      $alias = ' ' . trim($alias);
    }

    return Doctrine_Query::create($this->_conn, 'LotQuery')
      ->from($this->getComponentName() . $alias);
  }

  public function getObject($params)
  {
    return $this->createQuery()->active('show_lot')->filter($params)->limit(1)->fetchOne();
  }



  public function getSupLotsQuery($type = null)
  {
    if (!$type) {
      $suptype = sfContext::getInstance()->getUser()->getAttribute('suptype');
      if (!empty($suptype['types'])) {
        $type = $suptype['types'];
      }
    }

    $query = $this->createQuery()
            ->select('id, name')
            ->andWhere('has_children = true')
            ->andWhere('pid IS NULL')
            ->andWhere('status != "inactive"')
            ->orderBy('name');

    if (is_array($type)) {
      $query->andWhereIn('type', $type);
    }
    elseif (is_string($type)) {
      $query->andWhere('type = ?', $type);
    }

    return $query;
  }

  public function getTop40Ids($type)
  {
    $stmt = $this->getConnection()->prepare('
      select id from lot where type = ? order by rating desc limit 40
    ');
    $stmt->execute(array($type));
    $ids = $stmt->fetchAll(Doctrine::FETCH_COLUMN);
    $stmt->closeCursor();
    return $ids;
  }


  public function getCounters($type = null)
  {
    $query = $this->createQuery('l')
            ->select('COUNT(DISTINCT l.id) as count, COUNT(DISTINCT IF(new_object > NOW(), l.id, NULL)) as new')
            ->addSelectActualType()
            ->active()
            ->groupBy('actual_type');

    $counters = array_fill_keys(array_keys(Lot::$_types), array('count' => 0, 'new' => 0));

    foreach ($query->fetchArray() as $line) {
      $counters[$line['actual_type']] = $line;
    }

    $counters['eliteflat']['count'] += $counters['penthouse']['count'];
    $counters['eliteflat']['new'] += $counters['penthouse']['new'];

    if ($type) {
      switch($type) {
        case 'eliteflat' :
        case 'elitenew'  :
        case 'flatrent'  :
        case 'penthouse' :
          $query = $this->createQuery('l')
                  ->select('COUNT(DISTINCT l.id) as count, COUNT(DISTINCT IF(new_object > NOW(), l.id, NULL)) as new')
                  ->addSelect('l.district_id as option_id')
                  ->active()
                  ->type($type)
                  ->groupBy('l.district_id');
          $results = $query->fetchArray();
          $counters[$type]['sub_url_option'] = 'districts[]';
        break;

        case 'outoftown' :
        case 'cottage'   :
          $query = '
            SELECT COUNT(DISTINCT id) as count, COUNT(DISTINCT IF(new_object > NOW(), id, NULL)) as new, ward as option_id
              FROM lot
              WHERE status = ? AND type = ? AND ward IS NOT NULL
              GROUP BY ward
            UNION ALL
            SELECT COUNT(DISTINCT id) as count, COUNT(DISTINCT IF(new_object > NOW(), id, NULL)) as new, ward2 as option_id
              FROM lot
              WHERE status = ? AND type = ? AND ward2 IS NOT NULL
              GROUP BY ward2';
          $params = array('active', $type, 'active', $type);
          $results = $this->getConnection()
                  ->execute($query, $params)
                  ->fetchAll(PDO::FETCH_ASSOC);
          $counters[$type]['sub_url_option'] = 'wards[]';
        break;

        case 'comsell'   :
        case 'comrent'   :
          $query = $this->createQuery('l')
                  ->select('COUNT(DISTINCT l.id) as count, COUNT(DISTINCT IF(new_object > NOW(), l.id, NULL)) as new')
                  ->addSelect('p.value as value')
                  ->addSelect('l.id as useless')
                  ->leftJoin('l.LotParams p')
                  ->andWhere('p.param_id = ?', 1)
                  ->andWhereIn('p.value', Param::$_listable_by_property[$type]['objecttype'])
                  ->active()
                  ->type($type)
                  ->groupBy('p.value');
          $results = $query->fetchArray();
          $counters[$type]['sub_url_option'] = 'objecttype[]';
        break;
      }

      $options = Tools::getOfferCategoriesSorted($type);
      $counters[$type]['sub'] = array_fill_keys(array_keys($options), array('count' => 0, 'new' => 0));
      $presets = sfConfig::get('app_search_presets');
      $p_key   = str_replace('[]', '', $counters[$type]['sub_url_option']);
      foreach ($results as $line) {
        if (!empty($line['option_id']) && !empty($counters[$type]['sub'][$line['option_id']])) {
          if (!empty($presets[$p_key][$line['option_id']])){
            $line['preset'] = $presets[$p_key][$line['option_id']];
          }
        }
        elseif (!empty($line['value']) && !in_array($line['value'], $counters[$type]['sub'])) {
          if (!empty($presets[$p_key][$line['value']])){
            $line['preset'] = $presets[$p_key][$line['value']];
          }
          $line['preset'] = $presets[$p_key][$line['value']];
          $line['option_id'] = array_search($line['value'], $options);
        }
        else { continue; }

        if (isset($counters[$type]['sub'][$line['option_id']])) {
          $counters[$type]['sub'][$line['option_id']]['count'] += $line['count'];
          $counters[$type]['sub'][$line['option_id']]['new']   += $line['new'];
        }
        else {
          $counters[$type]['sub'][$line['option_id']] = $line;
        }
      }

      foreach ($counters[$type]['sub'] as $id => $row) {
        $counters[$type]['sub'][$id]['name'] = $options[$id];
      }
    }
    return $counters;
  }

  public function getBestLots()
  {
    $query  = 'SELECT id, type FROM lot WHERE is_special = 1 AND status = "active"';
    $results = $this->getConnection()
                  ->execute($query, array_keys(Lot::$_types))
                  ->fetchAll(PDO::FETCH_ASSOC);
    shuffle($results);
    $ids = array();
    foreach($results as $result){
      if(!array_key_exists($result['type'], $ids)) {
        $ids[$result['type']] = $result['id'];
      }
      if(count($ids) == count(Lot::$_types)) {
        break;
      }
    }

    if ($ids) {
      return $this->createQuery('l')
        ->andWhereIn('l.id', array_values($ids))
        ->orderBy('rand()')
        ->execute();
    }
    else {
      return array();
    }
  }

  public function getLotsForMain()
  {
    $lots = array();
    foreach (array_keys(Lot::$_types) as $type) {
      $lots[$type] = $this->getMostRatedLot($type);
    }

    return $lots;
  }

  public function getMostRatedLot($type)
  {
    return $this->createQuery()
            ->select('id, name, type, anons, is_penthouse, status')
            ->andWhere('status = ?', 'active')
            ->type($type)
            ->orderBy('rating desc')
            ->limit(1)
            ->fetchOne();
  }

  public function getChildren($parent_id)
  {
    return $this->createQuery('l')
            ->active()
            ->joinParams()
            ->andWhere('l.pid = ?', $parent_id)
            ->orderBy('l.type ASC, l.rating DESC')
            ->execute();
  }

  public function getAllChildren($parent_id)
  {
    return $this->createQuery('l')
      ->andWhere('l.pid = ?', $parent_id)
      ->orderBy('l.type ASC, l.rating DESC')
      ->execute();
  }

  public function getLotsFilteredQuery($type, $filter_params)
  {
    $query = $this->createQuery('l')
        ->joinParams()
        ->active();
    if (!empty($filter_params['lots'])) {
      $query->type($type, 'list')->andWhereIn('l.id', explode(',', trim($filter_params['lots'], ',')));
    }
    else {
      $objecttype = !empty($filter_params['objecttype']) && count($filter_params['objecttype']) ? $filter_params['objecttype'] : null;
      $query->type($type, 'list', $objecttype)->filter($filter_params);
    }
    return $query;
  }

  public function getParentsByIds($ids)
  {
    if (empty($ids)) return new Doctrine_Collection($this);

    $this->setAttribute(Doctrine_Core::ATTR_COLL_KEY, 'id');

    return $this->createQuery('l')
            ->active()
            ->joinParams()
            ->whereIn('l.id', $ids)
            ->execute();
  }

  public function getPriorityLotCount()
  {
    return $this->createQuery('l')
            ->andWhere('hide_price = 0')
            ->andWhere('price_all_from > 0')
            ->andWhere('exportable = 1')
            ->andWhere('status = "active"')
            ->andWhere('NOT ((type = "cottage" OR type = "outoftown") AND (has_children > 0))')
            ->andWhere('NOT ((type = "comsell" OR type = "comrent") AND (price_all_to > 0 OR area_to > 0))')
            ->andWhere('priority = 1')
            ->count();
  }

  public function getPremiumCianCount($id = null)
  {
    return $this->createQuery('l')
            ->joinParams()
            ->andWhere('l.hide_price = false')
            ->andWhere('l.price_all_from > 0')
            ->andWhere('l.exportable = true')
            ->andWhere('l.status = ?', 'active')
            ->andWhere('NOT ((l.type = "cottage" OR l.type = "outoftown") AND (l.has_children > 0))')
            ->andWhere('NOT ((l.type = "comsell" OR l.type = "comrent") AND (l.price_all_to > 0 OR l.area_to > 0))')
            ->andWhere('p.param_id = 89 AND p.value = ?', 'да')
            ->andWhere('l.id <> ?', intval($id))
            ->count();

  }
}