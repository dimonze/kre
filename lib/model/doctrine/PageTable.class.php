<?php

/**
 * PageTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PageTable extends Doctrine_Table
{
  /**
    * Returns an instance of this class.
    *
    * @return object PageTable
    */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Page');
  }

  public function getLatest($parent_id, $limit = 2)
  {
    return $this->createQuery()
            ->select('id,name,anons,created_at')
            ->andWhere('lft > (SQL: SELECT lft FROM page WHERE id = ?)', $parent_id)
            ->andWhere('lft < (SQL: SELECT rgt FROM page WHERE id = ?)', $parent_id)
            ->orderBy('created_at DESC, id DESC')
            ->limit($limit)
            ->execute();
  }

  public function getChildrenYearQuery(Page $page, $year = null)
  {
    return $this->createQuery()
            ->andWhere('lft > ?', $page->lft)
            ->andWhere('rgt < ?', $page->rgt)
            ->andWhere('level = ?', $page->level+1)
            ->andWhere('YEAR(created_at) = ?', ($year ? $year : date('Y')))
            ->orderBy('created_at DESC, id DESC');
  }

  public function getMainPages()
  {
    return $this->createQuery()
            ->andWhere('level = ?', 1)
            ->orderBy('lft')
            ->limit(6)
            ->execute();
  }

  public function getFirstLevelPage(Page $page)
  {
    if ($page->level == 1) return $page;

    return $this->createQuery()
            ->andWhere('lft < ?', $page->lft)
            ->andWhere('rgt > ?', $page->rgt)
            ->andWhere('level = ?', 1)
            ->fetchOne();
  }

  public function getFirstChildPage(Page $page)
  {
    return $this->createQuery()
            ->andWhere('lft > ?', $page->lft)
            ->andWhere('rgt < ?', $page->rgt)
            ->andWhere('level = ?', $page->level+1)
            ->orderBy('lft ASC')
            ->limit(1)
            ->fetchOne();
  }

  public function getChildrenYears(Page $parent)
  {
    return $this->createQuery()
            ->select('YEAR(created_at) as year')
            ->distinct(true)
            ->where('lft BETWEEN ? AND ?', array($parent->lft+1, $parent->rgt-1))
            ->andWhere('is_active = ?', array(1))
            ->orderBy('year DESC')
            ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
            ->execute();
  }

  public function getVacancyPage($type = null)
  {
    return $this->findOneBy('id', Vacancy::getIdByType($type));
  }

  public function findAscendants(Page $page)
  {
    $tree = $this->getTree();
    $base_query = $tree->getBaseQuery()
            ->andWhere('lft < ?', $page->lft)
            ->andWhere('rgt > ?', $page->rgt)
            ->andWhere('level < ?', $page->level)
            ->andWhere('level > 0');

    $tree->setBaseQuery($base_query);
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function findSubtree(Page $page, $subpage = null, $active = null)
  {
    $tree = $this->getTree();
    $base_query = $tree->getBaseQuery()
            ->andWhere('lft > ?', $page->lft)
            ->andWhere('rgt < ?', $page->rgt);

    if ($page->id == Page::NEWS_PARENT_ID || $page->id == Page::REVIEW_PARENT_ID) {
      $base_query->andWhere('lft NOT BETWEEN ? AND ?', array($subpage->lft+1, $subpage->rgt-1));
    }

    if ($active) {
      $base_query->andWhere('is_active = ?', true);
    }

    $tree->setBaseQuery($base_query);
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function findSubtreeLevel2(Page $page, $subpage = null)
  {
    $tree = $this->getTree();
    $base_query = $tree->getBaseQuery()
            ->andWhere('lft > ?', $page->lft)
            ->andWhere('rgt < ?', $page->rgt)
            ->andWhere('level = ?', 2);

    if ($page->id == Page::NEWS_PARENT_ID || $page->id == Page::REVIEW_PARENT_ID) {
      $base_query->andWhere('lft NOT BETWEEN ? AND ?', array($subpage->lft+1, $subpage->rgt-1));
    }

    $tree->setBaseQuery($base_query);
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function findTree()
  {
    $tree = $this->getTree();

    $tree->setBaseQuery($tree->getBaseQuery()->andWhere('level < ?', 3));
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function findTreeExceptRoot()
  {
    $tree = $this->getTree();

    $tree->setBaseQuery($tree->getBaseQuery()->andWhere('level > ?', 0));
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function findTreeExceptRootNewsReview()
  {
    $tree = $this->getTree();

    $tree->setBaseQuery(
      $tree->
        getBaseQuery()->
          andWhere('lft NOT BETWEEN (SQL: SELECT lft+1 as lft FROM page WHERE id = ?) AND (SQL: SELECT rgt as rgt FROM page WHERE id = ?)', array(Page::NEWS_ID, Page::NEWS_ID))->
          andWhere('lft NOT BETWEEN (SQL: SELECT lft+1 as lft FROM page WHERE id = ?) AND (SQL: SELECT rgt FROM page WHERE id = ?)', array(Page::REVIEW_ID, Page::REVIEW_ID))

    );
    $pages = $tree->fetchTree();
    $tree->resetBaseQuery();

    return $pages;
  }

  public function retrieveBackendPageList(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    $q->andWhere($rootAlias.'.id <> ?', 1);

    return $q;
  }
}